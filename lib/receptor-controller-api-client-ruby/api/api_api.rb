=begin
#Receptor-Controller

#Receptor-Controller Service

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0-SNAPSHOT

=end

require 'cgi'

module ReceptorControllerApiClientRuby
  class ApiApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get a list of open connections
    # @param account [String] Account number
    # @param [Hash] opts the optional parameters
    # @return [ConnectionListAccountResponse]
    def connection_account_get(account, opts = {})
      data, _status_code, _headers = connection_account_get_with_http_info(account, opts)
      data
    end

    # Get a list of open connections
    # @param account [String] Account number
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConnectionListAccountResponse, Integer, Hash)>] ConnectionListAccountResponse data, response status code and response headers
    def connection_account_get_with_http_info(account, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApiApi.connection_account_get ...'
      end
      # verify the required parameter 'account' is set
      if @api_client.config.client_side_validation && account.nil?
        fail ArgumentError, "Missing the required parameter 'account' when calling ApiApi.connection_account_get"
      end
      pattern = Regexp.new(/[0-9]+/)
      if @api_client.config.client_side_validation && account !~ pattern
        fail ArgumentError, "invalid value for 'account' when calling ApiApi.connection_account_get, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/connection/{account}'.sub('{' + 'account' + '}', CGI.escape(account.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'ConnectionListAccountResponse' 

      # auth_names
      auth_names = opts[:auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApiApi#connection_account_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a list of open connections
    # @param [Hash] opts the optional parameters
    # @return [ConnectionListResponse]
    def connection_get(opts = {})
      data, _status_code, _headers = connection_get_with_http_info(opts)
      data
    end

    # Get a list of open connections
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConnectionListResponse, Integer, Hash)>] ConnectionListResponse data, response status code and response headers
    def connection_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApiApi.connection_get ...'
      end
      # resource path
      local_var_path = '/connection'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'ConnectionListResponse' 

      # auth_names
      auth_names = opts[:auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApiApi#connection_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send a ping request to a receptor node
    # @param [Hash] opts the optional parameters
    # @option opts [ConnectionStatusRequest] :connection_status_request 
    # @return [ConnectionPingResponse]
    def connection_ping_post(opts = {})
      data, _status_code, _headers = connection_ping_post_with_http_info(opts)
      data
    end

    # Send a ping request to a receptor node
    # @param [Hash] opts the optional parameters
    # @option opts [ConnectionStatusRequest] :connection_status_request 
    # @return [Array<(ConnectionPingResponse, Integer, Hash)>] ConnectionPingResponse data, response status code and response headers
    def connection_ping_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApiApi.connection_ping_post ...'
      end
      # resource path
      local_var_path = '/connection/ping'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'connection_status_request']) 

      # return_type
      return_type = opts[:return_type] || 'ConnectionPingResponse' 

      # auth_names
      auth_names = opts[:auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApiApi#connection_ping_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Submit a job request to be routed to a customers environment
    # @param [Hash] opts the optional parameters
    # @option opts [ConnectionStatusRequest] :connection_status_request 
    # @return [ConnectionStatusResponse]
    def connection_status_post(opts = {})
      data, _status_code, _headers = connection_status_post_with_http_info(opts)
      data
    end

    # Submit a job request to be routed to a customers environment
    # @param [Hash] opts the optional parameters
    # @option opts [ConnectionStatusRequest] :connection_status_request 
    # @return [Array<(ConnectionStatusResponse, Integer, Hash)>] ConnectionStatusResponse data, response status code and response headers
    def connection_status_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApiApi.connection_status_post ...'
      end
      # resource path
      local_var_path = '/connection/status'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'connection_status_request']) 

      # return_type
      return_type = opts[:return_type] || 'ConnectionStatusResponse' 

      # auth_names
      auth_names = opts[:auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApiApi#connection_status_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Submit a job request to be routed to a customers environment
    # @param [Hash] opts the optional parameters
    # @option opts [JobRequest] :job_request 
    # @return [JobResponse]
    def job_post(opts = {})
      data, _status_code, _headers = job_post_with_http_info(opts)
      data
    end

    # Submit a job request to be routed to a customers environment
    # @param [Hash] opts the optional parameters
    # @option opts [JobRequest] :job_request 
    # @return [Array<(JobResponse, Integer, Hash)>] JobResponse data, response status code and response headers
    def job_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApiApi.job_post ...'
      end
      # resource path
      local_var_path = '/job'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'job_request']) 

      # return_type
      return_type = opts[:return_type] || 'JobResponse' 

      # auth_names
      auth_names = opts[:auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApiApi#job_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
